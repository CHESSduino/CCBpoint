Why to write this file?
re: when the chessduino group was creating, the mision is 
    "let more and more developer can work together for kids like the mindgames".
    The flamelock was the beginning project to show how to the sudoku rules used at kids toy.
    and the showing method is posting all history version of it, and the release the final toy.
    So the following is posting all the histiory version and comment them, to show how to be developed.
    
Filenames of All history version:
flmlock_020.1.chessidlong.txt
flmlock_020.2.printcmdonly.txt
flmlock_030.CodeInit.txt
flmlock_031.CodeIdxPos.txt
flmlock_032.InitCodePosChangedOK.txt
flmlock_040.24LockCodes3x3.txt
flmlock_041.12LockCodes3x3.txt
flmlock_050.SwitchToLevel2.txt
flmlock_051.Level2Ask.txt
flmlock_052.Level2BackToLevel1.txt
flmlock_053.Level2DebugInfo.txt
flmlock_060.Level2OK.txt
flmlock_061.Level2Final.txt
flmlock_070.Level1switch.txt

Comments of above:
v0.20.1: Starting from the correct reading information with RFID module.
         (come from the project Cloud Chess Board ccb_020.1.chessidlong.txt)
         all study with RFID module all start form arduino >> Examples >> 8.string >> CharacterAnalysis
         using Serial.print output the RFID readings to Console.
         Setup() the Serial
         Loop() reading, then translate RFID info to game rules. 
         at beginning only using Console text to show the game result.
         there're 3 parts of the file: comments, codes, debug message at end of source.
         (you can't compile them directly, need delete the end file debug messages, and rename .txt to .ino)
v0.20.2: disable the printTmpcodes(); 6 36 0 5A 88 D4      6 54 0 90 136 212

v0.30: Added ID initialization process, let ids equs to digital 1-9.
       After 9 RF modules all have ids, the initing finished.
       Debug information at end add Serial.println().
v0.31: Finished ids equs digitals.
v0.32: testing success - exchange ids to new position could be recognition, after init.
       (next target, using ids table to open lock.)

v0.40: Complete 3x3 arbitrary combination of logic, just fill the 24 groups of passwords.
v0.41: pls. see file "3x3codes.pdf" to view the 12 passwords.

v0.50: add 2 status, LEVEL1 switch to LEVEL2.
       2 different digitals in diffrent lines, let kids to finish onther 7.
       (pls. see the sudoko rules at http://flamechess.cn/duino/?page_id=2)
v0.51: Complete set of logic, problem solving and check the logical start.
v0.52: Finished the logicï¼Œlevel2 back to level1
v0.53: LEVEL2 logic to achieve, with lots of debugging information.

v0.60: Complete all logic, LEVEL2 3X3 random questions.
v0.61: Test all logical and game order:
       1, 1-9 initialization.
       2, any Sudoku rules of 3x3 LEVEL1
       3, detection of 9-1 special instruction sequence
       4, ask LEVEL2 initial condition 2 numbers (system random)
       5, complete the remaining 7 digits of the fill.
       6, complete the LEVEL2 cycle test. 
          Each time a different random number, 
          different positions, can meet the test requirements.
       -
       Sudoku logic complete password lock.
       The next step: plus Bluetooth module and microduino replacement.
           And then the next step, the completion of the game appearance of the equipment manual, 
       such as adding voice prompts, display tips, combined with a particular game scene design art decoration. 
       The earlier "zombies 2 conference" used mechanical Sudoku password lock. On the part of the installation, 
       but also need to switch steering gear. Work is just beginning

v0.70: The logical part completed, because there is no Bluetooth, can only play LEVEL1, 
       set up 1 password to Xiaoyuan, take project called Sudoku Halloween sugar.
